// Generated by Haxe 4.1.4
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var App = function() { };
App.__name__ = "App";
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.prototype = {
	keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var CCGamepad = function() {
	this.previousButtonID = null;
	this.axisMap = new haxe_ds_IntMap();
	this.btnMap = new haxe_ds_IntMap();
	this.buttonActionArray = [];
	this.isVisualizer = false;
	this.isWarning = true;
	var _gthis = this;
	window.document.addEventListener("DOMContentLoaded",function(event) {
		$global.console.log("" + App.NAME + " Dom ready :: build: " + "2020-09-27 10:14:06");
		_gthis.init();
	});
};
CCGamepad.__name__ = "CCGamepad";
CCGamepad.prototype = {
	setup: function(isVisualizer,isWarning) {
		if(isWarning == null) {
			isWarning = true;
		}
		if(isVisualizer == null) {
			isVisualizer = false;
		}
		this.isVisualizer = isVisualizer;
		this.isWarning = isWarning;
		this.init();
	}
	,onButton: function(buttonID,func,isTriggeredOnce) {
		if(isTriggeredOnce == null) {
			isTriggeredOnce = false;
		}
		var action = new Action(func,isTriggeredOnce);
		action.set_id(buttonID);
		action.set_description(CCGamepad.BUTTON_MAP.h[buttonID]);
		this.buttonActionArray.push(action);
	}
	,onButtonOnce: function(buttonID,func) {
		this.onButton(buttonID,func,true);
	}
	,onSelect: function(func,isTriggeredOnce) {
		if(isTriggeredOnce == null) {
			isTriggeredOnce = false;
		}
		var action = new Action(func,isTriggeredOnce);
		action.set_id(CCGamepad.BUTTON_SELECT);
		this.buttonActionArray.push(action);
	}
	,onSelectOnce: function(func) {
		this.onSelect(func,true);
	}
	,onStart: function(func,isTriggeredOnce) {
		if(isTriggeredOnce == null) {
			isTriggeredOnce = false;
		}
		var action = new Action(func,isTriggeredOnce);
		action.set_id(CCGamepad.BUTTON_START);
		this.buttonActionArray.push(action);
	}
	,onStartOnce: function(func) {
		this.onStart(func,true);
	}
	,onLeftBottom: function(func,isTriggeredOnce) {
		if(isTriggeredOnce == null) {
			isTriggeredOnce = false;
		}
		var action = new Action(func,isTriggeredOnce);
		action.set_id(CCGamepad.BUTTON_LEFT_BOTTOM);
		this.buttonActionArray.push(action);
	}
	,onLeftBottomOnce: function(func) {
		this.onLeftBottom(func,true);
	}
	,onRightBottom: function(func,isTriggeredOnce) {
		if(isTriggeredOnce == null) {
			isTriggeredOnce = false;
		}
		var action = new Action(func,isTriggeredOnce);
		action.set_id(CCGamepad.BUTTON_RIGHT_BOTTOM);
		this.buttonActionArray.push(action);
	}
	,onRightBottomOnce: function(func) {
		this.onRightBottom(func,true);
	}
	,onAxis: function(func) {
		this.onAxisFunc = func;
	}
	,init: function() {
		if(this.isWarning) {
			this.setupWarning();
		}
		this.setupListeners();
	}
	,setupWarning: function() {
		var containerDiv = window.document.createElement("div");
		containerDiv.id = "gamepad-warning";
		containerDiv.setAttribute("style","background-color: rgba(0, 0, 0, 0.3);width: 100vw;height: 100vh;display: flex;justify-content: center;align-items: center;overflow-x: hidden;overflow-y: auto;z-index: 99999999999;position: fixed;top: 0;left: 0;");
		var div = window.document.createElement("div");
		div.className = "wrapper";
		div.setAttribute("style","background-color: white;width: 300px;text-align: center;border: 1px solid rgba(0, 0, 0, .2);border-radius: .3rem;padding: 1rem 1rem;");
		div.innerHTML = "<i class=\"fa fa-gamepad fa-5x\"></i><h2>No gamepad detected</h2><p>If you have one, make sure it's plugged in / paired, and press buttons to wake it up.</p>";
		containerDiv.appendChild(div);
		window.document.body.appendChild(containerDiv);
	}
	,setupListeners: function() {
		window.addEventListener("gamepadconnected",$bind(this,this.onGamepadConnectedHandler));
		window.addEventListener("gamepaddisconnected",$bind(this,this.onGamepadDisconnectedHandler));
		window.addEventListener("gamepadbuttondown",$bind(this,this.onGamepadButtonDownHandler));
		window.addEventListener("gamepadbuttonup",$bind(this,this.onGamepadButtonUpHandler));
		window.addEventListener("gamepadaxismove",$bind(this,this.onGamepadAxisMoveHandler));
	}
	,setupInterface: function() {
		var gamepad = $global.navigator.getGamepads()[0];
		var d = window.document.createElement("div");
		d.className = "container";
		d.setAttribute("id","controller" + gamepad.index);
		var t = window.document.createElement("h1");
		t.appendChild(window.document.createTextNode("gamepad: " + gamepad.id));
		d.appendChild(t);
		var t = window.document.createElement("div");
		t.id = "name-button";
		d.appendChild(t);
		this.btnNameField = t;
		var b = window.document.createElement("div");
		b.className = "buttons";
		var _g = 0;
		var _g1 = gamepad.buttons.length;
		while(_g < _g1) {
			var i = _g++;
			var e = window.document.createElement("span");
			e.className = "button";
			e.innerHTML = i == null ? "null" : "" + i;
			b.appendChild(e);
			this.btnMap.h[i] = e;
		}
		d.appendChild(b);
		var a = window.document.createElement("div");
		a.className = "axes";
		var _g = 0;
		var _g1 = gamepad.axes.length;
		while(_g < _g1) {
			var i = _g++;
			var p = window.document.createElement("progress");
			p.className = "axis";
			p.setAttribute("max","2");
			p.setAttribute("value","1");
			p.innerHTML = i == null ? "null" : "" + i;
			a.appendChild(p);
			this.axisMap.h[i] = p;
		}
		d.appendChild(a);
		var pre = window.document.createElement("div");
		pre.innerText = "- index: " + gamepad.index + "\n- id: \"" + gamepad.id + "\"\n- timestamp: " + gamepad.timestamp + "\n- mapping: " + gamepad.mapping + "\n- connected: " + (gamepad.connected == null ? "null" : "" + gamepad.connected) + "\n- buttons: " + gamepad.buttons.length + "\n- axes: " + gamepad.axes.length;
		d.appendChild(pre);
		window.document.body.appendChild(d);
		var heart = window.document.createElement("span");
		heart.id = "heart";
		heart.textContent = "❤";
		var w = window.document.body.clientWidth;
		var h = window.document.body.clientHeight;
		heart.setAttribute("style","display: block;position: absolute;top: " + h / 2 + "px;left: " + w / 2 + "px;");
		window.document.body.appendChild(heart);
	}
	,onGamepadConnectedHandler: function(e) {
		$global.console.log("Gamepad connected",e.gamepad);
		if(this.isVisualizer) {
			this.setupInterface();
		}
		var warningDiv = window.document.getElementById("gamepad-warning");
		if(warningDiv != null) {
			warningDiv.style.display = "none";
		}
		window.document.body.focus();
		this.gameLoop();
	}
	,onGamepadDisconnectedHandler: function(e) {
		$global.console.log("Gamepad disconnected",e.gamepad);
		window.cancelAnimationFrame(this.requestID);
	}
	,onGamepadButtonDownHandler: function(e) {
		$global.console.log("Gamepad button down",e.button,e.gamepad);
	}
	,onGamepadButtonUpHandler: function(e) {
		$global.console.log("Gamepad button up",e.button,e.gamepad);
	}
	,onGamepadAxisMoveHandler: function(e) {
		$global.console.log("Gamepad axis move",e.button,e.gamepad);
	}
	,gameLoop: function(value) {
		var gamepad = $global.navigator.getGamepads()[0];
		if(this.isVisualizer) {
			var el = this.btnMap.iterator();
			while(el.hasNext()) {
				var el1 = el.next();
				el1.classList.remove("pressed");
			}
		}
		if(this.previousButtonID != null && !gamepad.buttons[this.previousButtonID].pressed) {
			this.previousButtonID = null;
		}
		var _g = 0;
		var _g1 = gamepad.buttons.length;
		while(_g < _g1) {
			var i = _g++;
			var currentButton = gamepad.buttons[i];
			if(currentButton.pressed) {
				if(this.isVisualizer) {
					var el = this.btnMap.h[i];
					el.classList.add("pressed");
					this.btnNameField.innerText = CCGamepad.BUTTON_MAP.h[i];
				}
				var _g2 = 0;
				var _g3 = this.buttonActionArray.length;
				while(_g2 < _g3) {
					var j = _g2++;
					var _action = this.buttonActionArray[j];
					if(_action.get_id() == i) {
						_action.set_gamepadButton(currentButton);
						_action.set_timestamp(new Date().getTime());
						if(_action.isOnce == true && this.previousButtonID != i) {
							_action.func.apply(_action.func,[_action]);
						} else if(_action.isOnce == false) {
							_action.func.apply(_action.func,[_action]);
						}
					}
				}
				this.previousButtonID = i;
			}
		}
		var _g = 0;
		var _g1 = gamepad.axes.length;
		while(_g < _g1) {
			var i = _g++;
			var joystickX = this.applyDeadzone(gamepad.axes[gamepad.axes.length - 2],0.25);
			var joystickY = this.applyDeadzone(gamepad.axes[gamepad.axes.length - 1],0.25);
			var joystickStr = "{x:" + joystickX + ",y:" + joystickY + "}";
			var joystickObj = { x : joystickX, y : joystickY, desc : CCGamepad.AXIS_MAP.h[joystickStr]};
			if(this.isVisualizer) {
				var axes = window.document.getElementsByClassName("axis");
				var a = axes[i];
				a.innerHTML = i + ": " + gamepad.axes[i];
				a.setAttribute("value",Std.string(gamepad.axes[i] + 1));
				if(!(joystickX == 0 && joystickY == 0)) {
					this.btnNameField.innerText = CCGamepad.AXIS_MAP.h[joystickStr];
				}
				var heart = window.document.getElementById("heart");
				heart.style.left = Std.parseInt(heart.style.left) + joystickX + "px";
				heart.style.top = Std.parseInt(heart.style.top) + joystickY + "px";
			}
			if(this.onAxisFunc != null) {
				if(joystickX != 0 || joystickY != 0) {
					var _func = this.onAxisFunc;
					var _arr = [joystickObj];
					_func.apply(_func,_arr);
				}
			}
		}
		this.requestID = window.requestAnimationFrame($bind(this,this.gameLoop));
	}
	,applyDeadzone: function(number,threshold) {
		var percentage = (Math.abs(number) - threshold) / (1 - threshold);
		if(percentage < 0) {
			percentage = 0;
		}
		return percentage * (number > 0 ? 1 : -1);
	}
	,__class__: CCGamepad
};
var Action = function(func,isOnce) {
	if(isOnce == null) {
		isOnce = false;
	}
	this.isOnce = false;
	this.func = func;
	this.isOnce = isOnce;
};
Action.__name__ = "Action";
Action.prototype = {
	get_id: function() {
		return this.id;
	}
	,set_id: function(value) {
		return this.id = value;
	}
	,set_gamepadButton: function(value) {
		return this.gamepadButton = value;
	}
	,set_timestamp: function(value) {
		return this.timestamp = value;
	}
	,set_description: function(value) {
		return this.description = value;
	}
	,__class__: Action
};
var HxOverrides = function() { };
HxOverrides.__name__ = "HxOverrides";
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Main = function() {
	var _gthis = this;
	window.document.addEventListener("DOMContentLoaded",function(event) {
		$global.console.log("" + interactive_App.NAME + " Dom ready :: build: " + "2020-09-27 11:28:02");
		_gthis.setupCC();
	});
};
Main.__name__ = "Main";
Main.main = function() {
	var app = new Main();
};
Main.prototype = {
	setupCC: function() {
		var cc = new interactive_Squares();
	}
	,__class__: Main
};
Math.__name__ = "Math";
var SNES = function() {
	$global.console.log("" + App.NAME + " SNES :: build: " + "2020-09-27 10:14:06");
	CCGamepad.call(this);
};
SNES.__name__ = "SNES";
SNES.__super__ = CCGamepad;
SNES.prototype = $extend(CCGamepad.prototype,{
	__class__: SNES
});
var Settings = function(width,height,type) {
	if(type == null) {
		type = "svg";
	}
	this.type = "svg";
	this.set_width(width);
	this.set_height(height);
	this.set_type(type.toLowerCase());
};
Settings.__name__ = "Settings";
Settings.prototype = {
	get_width: function() {
		return this.width;
	}
	,set_width: function(value) {
		return this.width = value;
	}
	,get_height: function() {
		return this.height;
	}
	,set_height: function(value) {
		return this.height = value;
	}
	,get_type: function() {
		return this.type;
	}
	,set_type: function(value) {
		return this.type = value;
	}
	,get_padding: function() {
		return this.padding;
	}
	,set_padding: function(value) {
		return this.padding = value;
	}
	,get_scale: function() {
		return this.scale;
	}
	,set_scale: function(value) {
		return this.scale = value;
	}
	,get_element: function() {
		return this.element;
	}
	,set_autostart: function(value) {
		return this.autostart = value;
	}
	,get_elementID: function() {
		return this.elementID;
	}
	,set_elementID: function(value) {
		return this.elementID = value;
	}
	,get_sizeType: function() {
		return this.sizeType;
	}
	,__class__: Settings
};
var Sketcher = function(settings) {
	this.WRAPPER_ID = "sketcher_wrapper";
	this.SVG_ID = "sketcher_svg";
	this.WEBGL_ID = "sketcher_canvas_webgl";
	this.CANVAS_ID = "sketcher_canvas";
	this.baseArray = [];
	this.settings = settings;
	Globals.w = settings.get_width();
	Globals.h = settings.get_height();
	if(settings.get_elementID() != null) {
		this.WRAPPER_ID = settings.get_elementID();
	}
	if(settings.get_scale() == true) {
		var node = window.document.createElement("style");
		node.innerHTML = "\n\t\t\t<!-- no padding -->\n\t\t\t.sketcher-wrapper{width: 100%;height: 100%; max-width: 100vh;padding: 0;margin: 0 auto;display: flex;align-items: center;justify-content: center;}\n\t\t\tsvg {width: 100%; height: 100%; background-color:#ffffff; }\n\t\t\tcanvas{width: 100%; background-color:#ffffff; }\n\t\t\t";
		window.document.body.appendChild(node);
	}
	if(settings.get_padding() != null && settings.get_padding() >= 0) {
		var node = window.document.createElement("style");
		node.innerHTML = "\n\t\t\t<!-- with padding -->\n\t\t\t.sketcher-wrapper{width: 100%;height: 100%; max-width: 100vh;padding: 0;margin: 0 auto;display: flex;align-items: center;justify-content: center;}\n\t\t\tsvg {padding: " + settings.get_padding() + "px; width: 100%;  height: 100%; background-color:#ffffff; }\n\t\t\tcanvas {padding: " + settings.get_padding() + "px; width: 100%; background-color:#ffffff; }\n\t\t\t";
		window.document.body.appendChild(node);
	}
};
Sketcher.__name__ = "Sketcher";
Sketcher.create = function(settings) {
	var sketcher = new Sketcher(settings);
	sketcher.baseArray = [];
	return sketcher;
};
Sketcher.prototype = {
	appendTo: function(element) {
		if(element == null) {
			return this;
		}
		this.element = element;
		switch(this.settings.get_type()) {
		case "canvas":
			this.canvas = window.document.createElement("canvas");
			this.canvas.width = this.settings.get_width();
			this.canvas.height = this.settings.get_height();
			this.canvas.id = this.CANVAS_ID;
			Sketcher.ctx = this.canvas.getContext("2d",null);
			element.appendChild(this.canvas);
			break;
		case "svg":
			this.update();
			break;
		case "webgl":
			this.canvas = window.document.createElement("canvas");
			this.canvas.width = this.settings.get_width();
			this.canvas.height = this.settings.get_height();
			this.canvas.id = this.WEBGL_ID;
			Sketcher.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,null);
			element.appendChild(this.canvas);
			break;
		default:
			haxe_Log.trace("case '" + this.settings.get_type().toLowerCase() + "': trace ('" + this.settings.get_type().toLowerCase() + "');",{ fileName : "Sketcher.hx", lineNumber : 118, className : "Sketcher", methodName : "appendTo"});
		}
		return this;
	}
	,makeBackground: function(color) {
		var shape = new sketcher_draw_Background(color);
		this.baseArray.unshift(shape);
		return shape;
	}
	,makeCircle: function(x,y,radius) {
		var shape = new sketcher_draw_Circle(x,y,radius);
		this.baseArray.push(shape);
		return shape;
	}
	,makeRectangle: function(x,y,width,height,isCenter) {
		if(isCenter == null) {
			isCenter = true;
		}
		var shape = new sketcher_draw_Rectangle(x,y,width,height,isCenter);
		this.baseArray.push(shape);
		return shape;
	}
	,makeEllipse: function(x,y,rx,ry) {
		var shape = new sketcher_draw_Ellipse(x,y,rx,ry);
		this.baseArray.push(shape);
		return shape;
	}
	,makePolygon: function(sides) {
		var shape = new sketcher_draw_Polygon(sides);
		this.baseArray.push(shape);
		return shape;
	}
	,makeGradient: function(color0,color1,isLinear) {
		if(isLinear == null) {
			isLinear = true;
		}
		var shape = new sketcher_draw_Gradient(color0,color1,isLinear);
		this.baseArray.push(shape);
		return shape;
	}
	,clear: function() {
		this.baseArray = [];
		if(this.settings.get_type().toLowerCase() == "svg") {
			this.element.innerHTML = "";
		}
		if(this.settings.get_type().toLowerCase() == "canvas") {
			Sketcher.ctx.clearRect(0,0,this.settings.get_width(),this.settings.get_height());
		}
	}
	,getSVGElement: function() {
		var svg = window.document.getElementById(this.SVG_ID);
		return svg;
	}
	,update: function() {
		if(this.element == null) {
			return;
		}
		switch(this.settings.get_type()) {
		case "canvas":
			var _g = 0;
			var _g1 = this.baseArray.length;
			while(_g < _g1) {
				var i = _g++;
				var base = this.baseArray[i];
				if(base == null) {
					continue;
				}
				base.ctx(Sketcher.ctx);
			}
			break;
		case "svg":
			var svgW = "" + this.settings.get_width();
			var svgH = "" + this.settings.get_height();
			if(this.settings.get_sizeType() != null) {
				svgW += "" + this.settings.get_sizeType();
				svgH += "" + this.settings.get_sizeType();
			}
			var _xml = "<?xml version=\"1.0\" standalone=\"no\"?><svg width=\"" + svgW + "\" height=\"" + svgH + "\" viewBox=\"0 0 " + svgW + " " + svgH + "\" version=\"1.1\" id=\"" + this.SVG_ID + "\" xmlns=\"http://www.w3.org/2000/svg\">";
			var content = "";
			var defs = "";
			var _g = 0;
			var _g1 = this.baseArray.length;
			while(_g < _g1) {
				var i = _g++;
				var base = this.baseArray[i];
				if(base == null) {
					continue;
				}
				var draw = base.svg(this.settings);
				switch(base.type) {
				case "gradient":case "mask":
					defs += draw;
					break;
				default:
					content += draw;
				}
			}
			_xml += "<defs>" + defs + "</defs>";
			_xml += content + "</svg>";
			this.svg = _xml;
			this.element.innerHTML = _xml;
			break;
		case "webgl":
			haxe_Log.trace("webgl",{ fileName : "Sketcher.hx", lineNumber : 642, className : "Sketcher", methodName : "update"});
			var _g = 0;
			var _g1 = this.baseArray.length;
			while(_g < _g1) {
				var i = _g++;
				var base = this.baseArray[i];
				if(base == null) {
					continue;
				}
				base.gl(Sketcher.gl);
			}
			break;
		default:
			haxe_Log.trace("case '" + this.settings.get_type() + "': trace ('" + this.settings.get_type() + "');",{ fileName : "Sketcher.hx", lineNumber : 651, className : "Sketcher", methodName : "update"});
		}
		this.baseArray = [];
	}
	,__class__: Sketcher
};
var Globals = function() { };
Globals.__name__ = "Globals";
var SketcherBase = function(settings) {
	this.description = "";
	this.patternName = "";
	this.isDebug = false;
	this.isDrawActive = true;
	if(this.isDebug) {
		haxe_Log.trace("START :: " + this.toString(),{ fileName : "SketcherBase.hx", lineNumber : 36, className : "SketcherBase", methodName : "new"});
	}
	if(settings == null) {
		var stageW = 1080;
		var stageH = 1080;
		settings = new Settings(stageW,stageH,"canvas");
		settings.set_autostart(true);
		settings.set_padding(10);
		settings.set_scale(false);
		settings.set_elementID("sketcher-canvas-wrapper");
	}
	if(settings != null && settings.get_element() != null) {
		haxe_Log.trace(settings.get_element(),{ fileName : "SketcherBase.hx", lineNumber : 52, className : "SketcherBase", methodName : "new"});
	}
	if(settings.get_elementID() != null && window.document.getElementById(settings.get_elementID()) == null) {
		var div0 = window.document.createElement("div");
		div0.id = "" + settings.get_elementID();
		div0.className = "sketcher-wrapper " + settings.get_type() + "-wrapper";
		window.document.body.appendChild(div0);
		this.sketch = Sketcher.create(settings).appendTo(div0);
	} else {
		this.sketch = Sketcher.create(settings).appendTo(window.document.getElementById(settings.get_elementID()));
	}
	window.addEventListener(Globals.RESIZE,$bind(this,this._reset),false);
	window.addEventListener(Globals.KEY_DOWN,$bind(this,this._keyDown),false);
	window.addEventListener(Globals.KEY_UP,$bind(this,this._keyUp),false);
	window.addEventListener(Globals.MOUSE_UP,$bind(this,this._mouseUp));
	this.setup();
	this._draw();
	$global.console.groupCollapsed("Default cc-sketcher keyboard shortcuts are activated");
	$global.console.info("• [cmd + r] = reload page\n• [cmd + s] = save jpg\n• [cmd + shift + s] = save png\n• [cmd + ctrl + s] = save transparant png\n• [cmd + alt + s] = save svg\n• [cmd + f] = toggle fullscreen");
	$global.console.groupEnd();
};
SketcherBase.__name__ = "SketcherBase";
SketcherBase.prototype = {
	_keyDown: function(e) {
		if(e.metaKey == true && e.key == "r") {
			$global.console.log("[cmd + r] = reload page");
			$global.location.reload();
		}
		if(e.metaKey == true && e.key == "s" && e.shiftKey == false && e.ctrlKey == false) {
			e.preventDefault();
			e.stopPropagation();
			$global.console.log("[cmd + s] = save jpg");
			if(this.sketch.settings.get_type() == "svg") {
				haxe_Log.trace("svg-jpg",{ fileName : "SketcherBase.hx", lineNumber : 99, className : "SketcherBase", methodName : "_keyDown"});
				sketcher_export_FileExport.svg2Canvas(this.sketch.getSVGElement(),true,this.getFileName());
			} else {
				haxe_Log.trace("canvas-jpg",{ fileName : "SketcherBase.hx", lineNumber : 103, className : "SketcherBase", methodName : "_keyDown"});
				sketcher_export_FileExport.downloadImageBg(this.sketch.canvas.getContext("2d",null),true,this.getFileName());
			}
		}
		if(e.metaKey == true && e.key == "s" && e.shiftKey == true) {
			e.preventDefault();
			e.stopPropagation();
			$global.console.log("[cmd + shift + s] = save png");
			if(this.sketch.settings.get_type() == "svg") {
				haxe_Log.trace("svg-png",{ fileName : "SketcherBase.hx", lineNumber : 116, className : "SketcherBase", methodName : "_keyDown"});
				sketcher_export_FileExport.svg2Canvas(this.sketch.getSVGElement(),false,this.getFileName());
			} else {
				haxe_Log.trace("canvas-png",{ fileName : "SketcherBase.hx", lineNumber : 120, className : "SketcherBase", methodName : "_keyDown"});
				sketcher_export_FileExport.downloadImageBg(this.sketch.canvas.getContext("2d",null),false,this.getFileName());
			}
		}
		if(e.metaKey == true && e.key == "s" && e.ctrlKey == true) {
			e.preventDefault();
			e.stopPropagation();
			$global.console.log("[cmd + ctrl + s] = save transparant png");
			if(this.sketch.settings.get_type() == "svg") {
				haxe_Log.trace("svg-png-transparant",{ fileName : "SketcherBase.hx", lineNumber : 131, className : "SketcherBase", methodName : "_keyDown"});
				sketcher_export_FileExport.svg2Canvas(this.sketch.getSVGElement(),false,this.getFileName(),true);
			} else {
				haxe_Log.trace("canvas-png-transparant",{ fileName : "SketcherBase.hx", lineNumber : 135, className : "SketcherBase", methodName : "_keyDown"});
				sketcher_export_FileExport.downloadImageBg(this.sketch.canvas.getContext("2d",null),false,this.getFileName(),true);
			}
		}
		if(e.metaKey == true && (e.code == "KeyS" && e.altKey == true)) {
			e.preventDefault();
			e.stopPropagation();
			$global.console.log("[cmd + alt + s] = save svg");
			if(this.sketch.settings.get_type() == "svg") {
				haxe_Log.trace("svg-text",{ fileName : "SketcherBase.hx", lineNumber : 148, className : "SketcherBase", methodName : "_keyDown"});
				sketcher_export_FileExport.downloadTextFile(this.sketch.svg,"" + this.getFileName() + ".svg");
			} else {
				$global.console.warn("no canvas-2-svg");
			}
		}
		if(e.metaKey == true && e.key == "f") {
			$global.console.log("[cmd + alt + s] = save svg");
			if(!Globals.isFullscreen) {
				this.openFullscreen();
				Globals.isFullscreen = true;
			} else {
				this.closeFullscreen();
				Globals.isFullscreen = false;
			}
		}
		if(e.key == " ") {
			this.draw();
		}
	}
	,_keyUp: function(e) {
	}
	,_mouseUp: function(e) {
		Globals.isMouseDown = false;
	}
	,_reset: function() {
	}
	,_draw: function(timestamp) {
		this.draw();
		this.__export();
		if(this.isDrawActive) {
			this.requestID = window.requestAnimationFrame($bind(this,this._draw));
		}
	}
	,setup: function() {
		if(this.isDebug) {
			haxe_Log.trace("SETUP :: " + this.toString() + " -> override public function draw()",{ fileName : "SketcherBase.hx", lineNumber : 204, className : "SketcherBase", methodName : "setup"});
		}
	}
	,draw: function() {
		if(this.isDebug) {
			haxe_Log.trace("DRAW :: " + this.toString() + " -> override public function draw()",{ fileName : "SketcherBase.hx", lineNumber : 212, className : "SketcherBase", methodName : "draw"});
		}
	}
	,__export: function() {
	}
	,openFullscreen: function() {
		var elem = window.document.documentElement;
		if(elem.requestFullscreen != null) {
			elem.requestFullscreen();
		} else if(elem.mozRequestFullScreen) {
			elem.mozRequestFullScreen();
		} else if(elem.webkitRequestFullscreen) {
			elem.webkitRequestFullscreen();
		} else if(elem.msRequestFullscreen) {
			elem.msRequestFullscreen();
		}
	}
	,closeFullscreen: function() {
		if(window.document.exitFullscreen != null) {
			window.document.exitFullscreen();
		} else if(window.document.mozCancelFullScreen) {
			window.document.mozCancelFullScreen();
		} else if(window.document.webkitExitFullscreen) {
			window.document.webkitExitFullscreen();
		} else if(window.document.msExitFullscreen) {
			window.document.msExitFullscreen();
		}
	}
	,get_w2: function() {
		return Globals.w / 2;
	}
	,get_h2: function() {
		return Globals.h / 2;
	}
	,getFileName: function() {
		if(this.patternName == "" && this.description == "") {
			this.patternName = "CC-Sketcher-MatthijsKamstra";
		} else if(this.patternName == "" && this.description != "") {
			this.patternName = this.description;
		}
		return "" + StringTools.replace(this.patternName," ","_") + "-" + new Date().getTime();
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		var className = c.__name__;
		return className;
	}
	,__class__: SketcherBase
};
var Std = function() { };
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringBuf = function() {
	this.b = "";
};
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
Xml.__name__ = "Xml";
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return haxe_ds_StringMap.keysIterator(this.attributeMap.h);
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_Log = function() { };
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	__class__: haxe_ValueException
});
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _g_current = 0;
			var _g_array = value.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var interactive_App = function() { };
interactive_App.__name__ = "interactive.App";
var interactive_Squares = function() {
	this.isRecording = false;
	this.shapeCounter = 0;
	this.shapeArray = ["square","pentagon","rectangle","hexagon","circle","triangle","ellipse"];
	this.stopRecord = function() {
	};
	this.startRecord = function() {
	};
	this.randomizeColor = function() {
	};
	this.buildversion = "2020-09-27 11:28:02";
	this.feedback = "";
	this.message = "dat.gui";
	this._colorArray = [];
	this._color4 = null;
	this._color3 = null;
	this._color2 = null;
	this._color1 = null;
	this._color0 = null;
	this.mouseY = 0.0;
	this.mouseX = 0.0;
	this.rotationSpeed = 0.0;
	this.currentSpeed = 3.0;
	this.DEFAULT_MAX_SPEED = 10.0;
	this.DEFAULT_SPEED = 1.0;
	this.endH = 100;
	this.endW = 100;
	this.startH = 800;
	this.startW = 800;
	this.totalShapes = 50;
	this.stageH = 1080;
	this.stageW = 1080;
	this.message = this.toString();
	var settings = new Settings(this.stageW,this.stageH,"canvas");
	settings.set_autostart(true);
	settings.set_padding(0);
	settings.set_scale(true);
	settings.set_elementID("canvas-" + this.toString());
	SketcherBase.call(this,settings);
	this.init();
};
interactive_Squares.__name__ = "interactive.Squares";
interactive_Squares.__super__ = SketcherBase;
interactive_Squares.prototype = $extend(SketcherBase.prototype,{
	init: function() {
		sketcher_util_EmbedUtil.datgui($bind(this,this.initDatGui2));
		this.videoExport = new sketcher_export_VideoExport();
		this.videoExport.setCanvas(this.sketch.canvas);
		this.videoExport.setup();
	}
	,setup: function() {
		this.description = "" + this.toString();
		this.mouseX = this.get_w2();
		this.mouseY = this.get_h2();
		this.setColors();
		this.initGamepad();
	}
	,initDatGui2: function() {
		var _gthis = this;
		var gui = new dat.gui.GUI();
		gui.add(this,"message");
		gui.add(this,"buildversion");
		gui.add(this,"currentSpeed",this.DEFAULT_SPEED,this.DEFAULT_MAX_SPEED).listen();
		gui.add(this,"rotationSpeed",0.0,10.0).listen();
		this.randomizeColor = function() {
			_gthis.setColors();
		};
		gui.add(this,"randomizeColor");
		gui.add(this,"selectedShape",this.shapeArray).listen();
		gui.add(this,"feedback").listen();
		var toggle = gui.add(this,"startRecord");
		toggle.onFinishChange(function(e) {
			_gthis.startRecording();
			return _gthis.feedback = "start-recording";
		});
		var toggle = gui.add(this,"stopRecord");
		toggle.onFinishChange(function(e) {
			_gthis.videoExport.stop();
			return _gthis.feedback = "stop-recording";
		});
	}
	,startRecording: function() {
		var _gthis = this;
		this.videoExport.start();
		haxe_Timer.delay(function() {
			_gthis.videoExport.stop();
		},60000);
	}
	,drawShape: function() {
		this.sketch.clear();
		this.sketch.makeBackground(sketcher_util_ColorUtil.getColourObj(this._color0));
		var gradient = this.sketch.makeGradient(sketcher_util_ColorUtil.getColourObj(this._color0),sketcher_util_ColorUtil.getColourObj(this._color1));
		gradient.setGradientDirection(sketcher_draw_GradientDir.LeftTopRightBottom);
		var offsetX = (this.startW - this.endW) / this.totalShapes;
		var offsetY = (this.startH - this.endH) / this.totalShapes;
		var centerOffsetX = (this.get_w2() - this.mouseX) / this.totalShapes;
		var centerOffsetY = (this.get_h2() - this.mouseY) / this.totalShapes;
		var _g = 0;
		var _g1 = this.totalShapes;
		while(_g < _g1) {
			var i = _g++;
			this.selectedShape = this.shapeArray[this.shapeCounter];
			var centerX = this.get_w2() - centerOffsetX * i;
			var centerY = this.get_h2() - centerOffsetY * i;
			switch(this.selectedShape) {
			case "circle":
				var shape = this.sketch.makeCircle(centerX,centerY,(this.startW - offsetX * i) * .5);
				shape.setFill(sketcher_util_ColorUtil.getColourObj(this._color0),1);
				shape.setStroke(sketcher_util_ColorUtil.getColourObj(this._color4));
				shape.setRotate(i * this.rotationSpeed);
				break;
			case "ellipse":
				var shape1 = this.sketch.makeEllipse(centerX,centerY,(this.startW - offsetX * i) * .5,(this.startH - offsetY * i) * .25);
				shape1.setFill(sketcher_util_ColorUtil.getColourObj(this._color0),1);
				shape1.setStroke(sketcher_util_ColorUtil.getColourObj(this._color4));
				shape1.setRotate(i * this.rotationSpeed);
				break;
			case "hexagon":
				var _polygon = this.sketch.makePolygon([]);
				_polygon.sides(centerX,centerY,6,(this.startW - offsetX * i) * .5);
				_polygon.setFill(sketcher_util_ColorUtil.getColourObj(this._color0),1);
				_polygon.setStroke(sketcher_util_ColorUtil.getColourObj(this._color4));
				_polygon.setRotate(i * this.rotationSpeed,centerX,centerY);
				break;
			case "pentagon":
				var _polygon1 = this.sketch.makePolygon([]);
				_polygon1.sides(centerX,centerY,5,(this.startW - offsetX * i) * .5);
				_polygon1.setFill(sketcher_util_ColorUtil.getColourObj(this._color0),1);
				_polygon1.setStroke(sketcher_util_ColorUtil.getColourObj(this._color4));
				_polygon1.setRotate(i * this.rotationSpeed,centerX,centerY);
				break;
			case "rectangle":
				var shape2 = this.sketch.makeRectangle(centerX,centerY,this.startW - offsetX * i,this.startH - offsetY * i * .5);
				shape2.setFill(sketcher_util_ColorUtil.getColourObj(this._color0),1);
				shape2.setStroke(sketcher_util_ColorUtil.getColourObj(this._color4));
				shape2.setRotate(i * this.rotationSpeed);
				break;
			case "square":
				var shape3 = this.sketch.makeRectangle(centerX,centerY,this.startW - offsetX * i,this.startH - offsetY * i);
				shape3.setFill(sketcher_util_ColorUtil.getColourObj(this._color0),1);
				shape3.setStroke(sketcher_util_ColorUtil.getColourObj(this._color4));
				shape3.setRotate(i * this.rotationSpeed);
				break;
			case "triangle":
				var _polygon2 = this.sketch.makePolygon([]);
				_polygon2.sides(centerX,centerY,3,(this.startW - offsetX * i) * .5);
				_polygon2.setFill(sketcher_util_ColorUtil.getColourObj(this._color0),1);
				_polygon2.setStroke(sketcher_util_ColorUtil.getColourObj(this._color4));
				_polygon2.setRotate(i * this.rotationSpeed,centerX,centerY);
				break;
			default:
				haxe_Log.trace("case '" + this.selectedShape + "': trace ('" + this.selectedShape + "');",{ fileName : "src/interactive/Squares.hx", lineNumber : 223, className : "interactive.Squares", methodName : "drawShape"});
			}
		}
		this.sketch.update();
	}
	,draw: function() {
		this.drawShape();
	}
	,setColors: function() {
		var colorArray = sketcher_util_ColorUtil.niceColor100SortedString[sketcher_util_MathUtil.randomInt(sketcher_util_ColorUtil.niceColor100SortedString.length - 1)];
		var int = Std.parseInt(StringTools.replace(colorArray[0],"#","0x"));
		this._color0 = { r : int >> 16 & 255, g : int >> 8 & 255, b : int & 255};
		var int = Std.parseInt(StringTools.replace(colorArray[1],"#","0x"));
		this._color1 = { r : int >> 16 & 255, g : int >> 8 & 255, b : int & 255};
		var int = Std.parseInt(StringTools.replace(colorArray[2],"#","0x"));
		this._color2 = { r : int >> 16 & 255, g : int >> 8 & 255, b : int & 255};
		var int = Std.parseInt(StringTools.replace(colorArray[3],"#","0x"));
		this._color3 = { r : int >> 16 & 255, g : int >> 8 & 255, b : int & 255};
		var int = Std.parseInt(StringTools.replace(colorArray[4],"#","0x"));
		this._color4 = { r : int >> 16 & 255, g : int >> 8 & 255, b : int & 255};
		this._colorArray = [this._color0,this._color1,this._color2,this._color3,this._color4];
	}
	,initGamepad: function() {
		var gamePad = new SNES();
		gamePad.setup(false);
		gamePad.onSelectOnce($bind(this,this.onSelectHandler));
		gamePad.onStartOnce($bind(this,this.onStartHandler));
		gamePad.onLeftBottomOnce($bind(this,this.onLeftBottomHandler));
		gamePad.onRightBottomOnce($bind(this,this.onRightBottomHandler));
		gamePad.onButtonOnce(CCGamepad.BUTTON_B,$bind(this,this.onButton));
		gamePad.onButtonOnce(CCGamepad.BUTTON_A,$bind(this,this.onButton));
		gamePad.onButton(CCGamepad.BUTTON_Y,$bind(this,this.onButton));
		gamePad.onButton(CCGamepad.BUTTON_X,$bind(this,this.onButton));
		gamePad.onAxis($bind(this,this.onAxis));
	}
	,onSelectHandler: function(e) {
		$global.console.log("onSelectHandler: ",e);
		if(this.isRecording) {
			$global.console.log("[gamepad.selectBtn] (current recording) :: stop recording");
			this.feedback = "[select] stop recording";
			this.videoExport.stop();
		} else {
			$global.console.log("[gamepad.selectBtn] (current not recording) :: start recording");
			this.feedback = "[select] start recording";
			this.startRecording();
		}
		this.isRecording = !this.isRecording;
	}
	,onStartHandler: function(e) {
		$global.console.log(" onStartHandler:",e);
	}
	,onLeftBottomHandler: function(e) {
		this.currentSpeed--;
		if(this.currentSpeed <= this.DEFAULT_SPEED) {
			this.currentSpeed = this.DEFAULT_SPEED;
		}
		$global.console.log(this.currentSpeed);
	}
	,onRightBottomHandler: function(e) {
		this.currentSpeed++;
		if(this.currentSpeed >= this.DEFAULT_MAX_SPEED) {
			this.currentSpeed = this.DEFAULT_MAX_SPEED;
		}
		$global.console.log(this.currentSpeed);
	}
	,onAxis: function(e) {
		this.mouseX += e.x * this.currentSpeed;
		this.mouseY += e.y * this.currentSpeed;
		if(this.mouseX - this.endW * 0.5 <= 0) {
			this.mouseX = this.endW * .5;
		}
		if(this.mouseX + this.endW * 0.5 >= this.stageW) {
			this.mouseX = this.stageW - this.endW * .5;
		}
		if(this.mouseY - this.endH * 0.5 <= 0) {
			this.mouseY = this.endH * .5;
		}
		if(this.mouseY + this.endH * 0.5 >= this.stageW) {
			this.mouseY = this.stageW - this.endH * .5;
		}
	}
	,onButton: function(e) {
		switch(e.get_id()) {
		case CCGamepad.BUTTON_A:
			$global.console.log("-- > " + e.get_id() + " // change color");
			this.randomizeColor();
			break;
		case CCGamepad.BUTTON_B:
			this.shapeCounter++;
			if(this.shapeCounter > this.shapeArray.length - 1) {
				this.shapeCounter = 0;
			}
			$global.console.log("--> " + e.get_id() + " // change shapes (" + this.shapeCounter + "/" + this.shapeArray.length + " :: " + this.shapeArray[this.shapeCounter] + ")");
			break;
		case CCGamepad.BUTTON_X:
			this.rotationSpeed += 0.1;
			break;
		case CCGamepad.BUTTON_Y:
			this.rotationSpeed -= 0.1;
			if(this.rotationSpeed <= 0) {
				this.rotationSpeed = 0;
			}
			break;
		default:
			haxe_Log.trace("case '" + e.get_id() + "': trace ('" + e.get_id() + "');",{ fileName : "src/interactive/Squares.hx", lineNumber : 350, className : "interactive.Squares", methodName : "onButton"});
		}
	}
	,__class__: interactive_Squares
});
var js_Boot = function() { };
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html__$CanvasElement_CanvasUtil = function() { };
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name = "experimental-webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	return null;
};
var sketcher_draw_Base = function(name) {
	this.transArr = [];
	this.dash = [];
	this.xml = Xml.createElement(name);
	sketcher_draw_Base.COUNT++;
	this.set_id(this.get_id());
};
sketcher_draw_Base.__name__ = "sketcher.draw.Base";
sketcher_draw_Base.prototype = {
	setRotate: function(degree,rx,ry) {
		if(ry == null) {
			ry = 0;
		}
		if(rx == null) {
			rx = 0;
		}
		this.rotate = degree;
		this.set_rx(rx);
		this.set_ry(ry);
		var str = "rotate(" + degree;
		if(rx != 0) {
			str += "," + rx;
		}
		if(ry != 0) {
			str += "," + ry;
		}
		str += ")";
		this.transArr.push(str);
	}
	,getTransform: function() {
		var str = "";
		var _g = 0;
		var _g1 = this.transArr.length;
		while(_g < _g1) {
			var i = _g++;
			str += this.transArr[i] + " ";
		}
		return str;
	}
	,setStroke: function(color,weight,opacity) {
		if(opacity == null) {
			opacity = 1;
		}
		if(weight == null) {
			weight = 1;
		}
		this.set_strokeColor(color);
		this.set_strokeWeight(weight);
		this.set_strokeOpacity(opacity);
		return this;
	}
	,setFill: function(color,opacity) {
		if(opacity == null) {
			opacity = 1;
		}
		this.set_fillColor(color);
		this.set_fillOpacity(opacity);
		return this;
	}
	,convertID: function(id) {
		return StringTools.replace(id.toLowerCase()," ","_");
	}
	,useDefaultsCanvas: function() {
		if(this.get_lineWeight() == null) {
			this.set_lineWeight(0);
		}
		if(this.get_fillColor() == null) {
			this.set_fillColor("#000000");
		}
		if(this.get_strokeColor() == null) {
			this.set_strokeColor("#000000");
			this.set_strokeOpacity(0);
		}
		if(this.get_fillOpacity() == null) {
			this.set_fillOpacity(1);
		}
		if(this.get_strokeOpacity() == null) {
			this.set_strokeOpacity(1);
		}
		if(this.get_lineCap() == null) {
			this.set_lineCap("butt");
		}
		if(this.get_lineJoin() == null) {
			this.set_lineJoin("miter");
		}
	}
	,get_id: function() {
		if(this.id == null) {
			this.set_id(this.getName() + "_" + sketcher_draw_Base.COUNT);
			sketcher_draw_Base.COUNT++;
		}
		return this.id;
	}
	,set_id: function(value) {
		value = this.convertID(value);
		if(this.xml != null) {
			this.xml.set("id",value == null ? "null" : "" + value);
			this.xml.set("data-count",Std.string(sketcher_draw_Base.COUNT));
		}
		return this.id = value;
	}
	,get_fill: function() {
		return this.fill;
	}
	,set_fill: function(value) {
		this.xml.set("fill",value == null ? "null" : "" + value);
		return this.fill = value;
	}
	,get_fillColor: function() {
		return this.get_fill();
	}
	,set_fillColor: function(value) {
		return this.set_fill(value);
	}
	,get_stroke: function() {
		return this.stroke;
	}
	,set_stroke: function(value) {
		this.xml.set("stroke",value == null ? "null" : "" + value);
		return this.stroke = value;
	}
	,get_strokeColor: function() {
		return this.get_stroke();
	}
	,set_strokeColor: function(value) {
		return this.set_stroke(value);
	}
	,get_lineWeight: function() {
		return this.lineWeight;
	}
	,set_lineWeight: function(value) {
		this.xml.set("stroke-width",value == null ? "null" : "" + value);
		return this.lineWeight = value;
	}
	,set_strokeWeight: function(value) {
		return this.set_lineWeight(value);
	}
	,get_strokeOpacity: function() {
		return this.strokeOpacity;
	}
	,set_strokeOpacity: function(value) {
		var v = sketcher_util_MathUtil.clamp(value,0,1);
		this.xml.set("stroke-opacity",v == null ? "null" : "" + v);
		return this.strokeOpacity = v;
	}
	,get_fillOpacity: function() {
		return this.fillOpacity;
	}
	,set_fillOpacity: function(value) {
		var v = sketcher_util_MathUtil.clamp(value,0,1);
		this.xml.set("fill-opacity",v == null ? "null" : "" + v);
		return this.fillOpacity = v;
	}
	,get_y: function() {
		return this.y;
	}
	,set_y: function(value) {
		return this.y = value;
	}
	,get_x: function() {
		return this.x;
	}
	,set_x: function(value) {
		return this.x = value;
	}
	,get_rotate: function() {
		return this.rotate;
	}
	,get_rx: function() {
		return this.rx;
	}
	,set_rx: function(value) {
		return this.rx = value;
	}
	,get_ry: function() {
		return this.ry;
	}
	,set_ry: function(value) {
		return this.ry = value;
	}
	,get_move: function() {
		return this.move;
	}
	,get_dash: function() {
		return this.dash;
	}
	,get_lineCap: function() {
		return this.lineCap;
	}
	,set_lineCap: function(value) {
		this.xml.set("stroke-linecap",Std.string(value));
		return this.lineCap = value;
	}
	,get_lineJoin: function() {
		return this.lineJoin;
	}
	,set_lineJoin: function(value) {
		this.xml.set("stroke-linejoin",Std.string(value));
		return this.lineJoin = value;
	}
	,getName: function() {
		var c = js_Boot.getClass(this);
		var name = c.__name__;
		return "" + name;
	}
	,__class__: sketcher_draw_Base
};
var sketcher_draw_Background = function(color) {
	this.type = "background";
	sketcher_draw_Base.call(this,"rect");
	this.set_fillColor(color);
	this.set_id("background-layer");
};
sketcher_draw_Background.__name__ = "sketcher.draw.Background";
sketcher_draw_Background.__super__ = sketcher_draw_Base;
sketcher_draw_Background.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		this.xml.set("x","0");
		this.xml.set("y","0");
		this.xml.set("width",Std.string(Globals.w));
		this.xml.set("height",Std.string(Globals.h));
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		this.useDefaultsCanvas();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor = { r : _r, g : _g, b : _b, a : _a};
		ctx.fillStyle = sketcher_util_ColorUtil.getColourObj(_fillColor,this.get_fillOpacity());
		ctx.beginPath();
		ctx.rect(0,0,Globals.w,Globals.h);
		ctx.fill();
		ctx.closePath();
	}
	,gl: function(gl) {
		if(!sketcher_draw_Background.ISWARN) {
			$global.console.warn("webgl is not implemented yet");
			sketcher_draw_Background.ISWARN = true;
		}
		var c = "#ff3333";
		var value = c;
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var rgba_r = _r;
		var rgba_g = _g;
		var rgba_b = _b;
		var rgba_a = _a;
		gl.viewport(0,0,gl.drawingBufferWidth,gl.drawingBufferHeight);
		gl.clearColor(rgba_r / 255,rgba_g / 255,rgba_b / 255,rgba_a);
		gl.clear(16384);
	}
	,__class__: sketcher_draw_Background
});
var sketcher_draw_Circle = function(x,y,radius) {
	this.type = "circle";
	this.set_x(x);
	this.set_y(y);
	this.set_radius(radius);
	sketcher_draw_Base.call(this,"circle");
};
sketcher_draw_Circle.__name__ = "sketcher.draw.Circle";
sketcher_draw_Circle.__super__ = sketcher_draw_Base;
sketcher_draw_Circle.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		this.xml.set("cx",Std.string(this.get_x()));
		this.xml.set("cy",Std.string(this.get_y()));
		this.xml.set("r",Std.string(this.get_radius()));
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		if(this.get_lineWeight() != null) {
			this.xml.set("stroke-width",Std.string(this.get_lineWeight()));
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		ctx.lineWidth = this.get_lineWeight();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor = { r : _r, g : _g, b : _b, a : _a};
		ctx.fillStyle = sketcher_util_ColorUtil.getColourObj(_fillColor,this.get_fillOpacity());
		var value = this.get_strokeColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _strokeColor = { r : _r, g : _g, b : _b, a : _a};
		ctx.strokeStyle = sketcher_util_ColorUtil.getColourObj(_strokeColor,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		if(this.get_rotate() != null) {
			ctx.save();
			ctx.translate(this.get_x(),this.get_y());
			ctx.rotate(sketcher_util_MathUtil.radians(this.get_rotate()));
			if(this.get_move() != null) {
				ctx.translate(this.get_move().x,this.get_move().y);
			}
			ctx.arc(0,0,this.get_radius(),0,2 * Math.PI);
			ctx.restore();
		}
		if(this.get_rotate() == null) {
			ctx.arc(this.get_x(),this.get_y(),this.get_radius(),0,2 * Math.PI);
		}
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
		var tmp = this.get_rotate() != null;
	}
	,gl: function(gl) {
	}
	,get_radius: function() {
		return this.radius;
	}
	,set_radius: function(value) {
		return this.radius = value;
	}
	,__class__: sketcher_draw_Circle
});
var sketcher_draw_Ellipse = function(x,y,rx,ry) {
	this.type = "Ellipse";
	this.set_x(x);
	this.set_y(y);
	this.set_rrx(rx);
	this.set_rry(ry);
	sketcher_draw_Base.call(this,"ellipse");
};
sketcher_draw_Ellipse.__name__ = "sketcher.draw.Ellipse";
sketcher_draw_Ellipse.__super__ = sketcher_draw_Base;
sketcher_draw_Ellipse.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		this.xml.set("cx",Std.string(this.get_x()));
		this.xml.set("cy",Std.string(this.get_y()));
		this.xml.set("rx",Std.string(this.get_rrx()));
		this.xml.set("ry",Std.string(this.get_rry()));
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		ctx.lineWidth = this.get_lineWeight();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor = { r : _r, g : _g, b : _b, a : _a};
		ctx.fillStyle = sketcher_util_ColorUtil.getColourObj(_fillColor,this.get_fillOpacity());
		var value = this.get_strokeColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _strokeColor = { r : _r, g : _g, b : _b, a : _a};
		ctx.strokeStyle = sketcher_util_ColorUtil.getColourObj(_strokeColor,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		ctx.ellipse(this.get_x(),this.get_y(),this.get_rrx(),this.get_rry(),sketcher_util_MathUtil.radians(this.get_rotate()),0,2 * Math.PI);
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
	}
	,gl: function(gl) {
	}
	,get_rry: function() {
		return this.rry;
	}
	,set_rry: function(value) {
		return this.rry = value;
	}
	,get_rrx: function() {
		return this.rrx;
	}
	,set_rrx: function(value) {
		return this.rrx = value;
	}
	,__class__: sketcher_draw_Ellipse
});
var sketcher_draw_Gradient = function(color0,color1,isLinear) {
	if(isLinear == null) {
		isLinear = true;
	}
	this.dir = sketcher_draw_GradientDir.LeftRight;
	this.type = "gradient";
	this.color0 = color0;
	this.color1 = color1;
	sketcher_draw_Base.call(this,"linearGradient");
};
sketcher_draw_Gradient.__name__ = "sketcher.draw.Gradient";
sketcher_draw_Gradient.__super__ = sketcher_draw_Base;
sketcher_draw_Gradient.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		var stop0 = Xml.createElement("stop");
		stop0.set("offset","0%");
		stop0.set("stop-color","" + this.color0);
		var stop1 = Xml.createElement("stop");
		stop1.set("offset","100%");
		stop1.set("stop-color","" + this.color1);
		this.xml.addChild(stop0);
		this.xml.addChild(stop1);
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		var w = ctx.canvas.width;
		var h = ctx.canvas.height;
		var grd;
		switch(this.dir._hx_index) {
		case 0:case 1:
			grd = ctx.createLinearGradient(0,0,w,0);
			break;
		case 2:case 3:
			grd = ctx.createLinearGradient(h,0,0,0);
			break;
		case 4:case 5:
			grd = ctx.createLinearGradient(0,0,0,h);
			break;
		case 6:case 7:
			grd = ctx.createLinearGradient(0,w,0,0);
			break;
		case 8:case 9:
			grd = ctx.createLinearGradient(0,0,w,h);
			break;
		case 10:case 11:
			grd = ctx.createLinearGradient(0,h,w,0);
			break;
		case 12:case 13:
			grd = ctx.createLinearGradient(h,w,0,0);
			break;
		case 14:case 15:
			grd = ctx.createLinearGradient(h,0,0,h);
			break;
		}
		grd.addColorStop(0,"" + this.color0);
		grd.addColorStop(1,"" + this.color1);
		this.canvasGradient = grd;
		this.gradientObj = { id : this.get_id(), canvasGradient : this.canvasGradient};
		ctx.fillStyle = grd;
		ctx.fillRect(0,0,w,h);
	}
	,gl: function(gl) {
	}
	,setGradientDirection: function(dir) {
		this.dir = dir;
	}
	,__class__: sketcher_draw_Gradient
});
var sketcher_draw_GradientDir = $hxEnums["sketcher.draw.GradientDir"] = { __ename__ : true, __constructs__ : ["LeftRight","LR","RightLeft","RL","TopBottom","TB","BottomTop","BT","LeftTopRightBottom","TopLeftBottomRight","LeftBottomTopRight","BottomLeftRightTop","RightBottomLeftTop","BottomRightTopLeft","TopRightLeftBottom","RightTopBottomLeft"]
	,LeftRight: {_hx_index:0,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,LR: {_hx_index:1,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,RightLeft: {_hx_index:2,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,RL: {_hx_index:3,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,TopBottom: {_hx_index:4,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,TB: {_hx_index:5,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,BottomTop: {_hx_index:6,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,BT: {_hx_index:7,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,LeftTopRightBottom: {_hx_index:8,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,TopLeftBottomRight: {_hx_index:9,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,LeftBottomTopRight: {_hx_index:10,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,BottomLeftRightTop: {_hx_index:11,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,RightBottomLeftTop: {_hx_index:12,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,BottomRightTopLeft: {_hx_index:13,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,TopRightLeftBottom: {_hx_index:14,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,RightTopBottomLeft: {_hx_index:15,__enum__:"sketcher.draw.GradientDir",toString:$estr}
};
var sketcher_draw_Polygon = function(arr) {
	this.type = "Polygon";
	this.set_arr(arr);
	sketcher_draw_Base.call(this,"polygon");
};
sketcher_draw_Polygon.__name__ = "sketcher.draw.Polygon";
sketcher_draw_Polygon.__super__ = sketcher_draw_Base;
sketcher_draw_Polygon.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		var str = "";
		var _g = 0;
		var _g1 = this.get_arr().length;
		while(_g < _g1) {
			var i = _g++;
			var value = this.get_arr()[i];
			str += "" + value + " ";
		}
		this.xml.set("points",str);
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		if(!sketcher_draw_Polygon.ISWARN) {
			$global.console.groupCollapsed("Polygon (" + this.get_id() + ") info canvas");
			$global.console.warn("doesn't work\n- move\n- rotate (for weird shapes, works for sides)\n- lineJoin");
			$global.console.groupEnd();
			sketcher_draw_Polygon.ISWARN = true;
		}
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		ctx.lineWidth = this.get_lineWeight();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor = { r : _r, g : _g, b : _b, a : _a};
		ctx.fillStyle = sketcher_util_ColorUtil.getColourObj(_fillColor,this.get_fillOpacity());
		var value = this.get_strokeColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _strokeColor = { r : _r, g : _g, b : _b, a : _a};
		ctx.strokeStyle = sketcher_util_ColorUtil.getColourObj(_strokeColor,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		var _pointArray = this.convertArr();
		if(this.get_rotate() != null) {
			ctx.save();
			ctx.translate(this.get_rx(),this.get_ry());
			ctx.rotate(sketcher_util_MathUtil.radians(this.get_rotate()));
			var _g = 0;
			var _g1 = _pointArray.length;
			while(_g < _g1) {
				var i = _g++;
				var p = _pointArray[i];
				if(i == 0) {
					ctx.moveTo(p.x - this.get_rx(),p.y - this.get_ry());
				} else {
					ctx.lineTo(p.x - this.get_rx(),p.y - this.get_ry());
				}
			}
			ctx.restore();
		} else {
			var _g = 0;
			var _g1 = _pointArray.length;
			while(_g < _g1) {
				var i = _g++;
				var p = _pointArray[i];
				if(i == 0) {
					ctx.moveTo(p.x,p.y);
				} else {
					ctx.lineTo(p.x,p.y);
				}
			}
		}
		ctx.closePath();
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
	}
	,gl: function(gl) {
	}
	,convertArr: function() {
		var _pointArray = [];
		var _g = 0;
		var _g1 = this.get_arr().length;
		while(_g < _g1) {
			var i = _g++;
			if(i % 2 == 0) {
				var x = this.get_arr()[i];
				var y = this.get_arr()[i + 1];
				_pointArray.push({ x : x, y : y});
			}
		}
		return _pointArray;
	}
	,sides: function(x,y,sides,size,rotateDegree) {
		this.set_arr([]);
		this.set_rx(x);
		this.set_ry(y);
		if(rotateDegree == null) {
			rotateDegree = 0;
		} else {
			rotateDegree = sketcher_util_MathUtil.radians(rotateDegree);
		}
		var _g = 0;
		var _g1 = sides;
		while(_g < _g1) {
			var i = _g++;
			var _x = x + size * Math.cos(rotateDegree + i * (2 * Math.PI) / sides);
			var _y = y + size * Math.sin(rotateDegree + i * (2 * Math.PI) / sides);
			this.get_arr().push(_x);
			this.get_arr().push(_y);
		}
	}
	,get_arr: function() {
		return this.arr;
	}
	,set_arr: function(value) {
		return this.arr = value;
	}
	,__class__: sketcher_draw_Polygon
});
var sketcher_draw_Rectangle = function(x,y,width,height,isCenter) {
	if(isCenter == null) {
		isCenter = true;
	}
	this.type = "rectangle";
	this.set_x(x);
	this.set_y(y);
	this.set_width(width);
	this.set_height(height);
	this.cx = this.get_x() - this.get_width() / 2;
	this.cy = this.get_y() - this.get_height() / 2;
	this.isCenter = isCenter;
	if(!isCenter) {
		this.cx = this.get_x();
		this.cy = this.get_y();
	}
	this.point_top_left = { x : this.cx, y : this.cy};
	this.point_top_right = { x : this.cx + this.get_width(), y : this.cy};
	this.point_bottom_left = { x : this.cx, y : this.cy + this.get_height()};
	this.point_bottom_right = { x : this.cx + this.get_width(), y : this.cy + this.get_height()};
	sketcher_draw_Base.call(this,"rect");
};
sketcher_draw_Rectangle.__name__ = "sketcher.draw.Rectangle";
sketcher_draw_Rectangle.__super__ = sketcher_draw_Base;
sketcher_draw_Rectangle.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		this.xml.set("x",Std.string(this.cx));
		this.xml.set("y",Std.string(this.cy));
		this.xml.set("width",Std.string(this.get_width()));
		this.xml.set("height",Std.string(this.get_height()));
		if(this.get_radius() != null) {
			this.xml.set("rx",Std.string(this.get_radius()));
			this.xml.set("ry",Std.string(this.get_radius()));
		}
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		ctx.lineWidth = this.get_lineWeight();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor = { r : _r, g : _g, b : _b, a : _a};
		ctx.fillStyle = sketcher_util_ColorUtil.getColourObj(_fillColor,this.get_fillOpacity());
		var value = this.get_strokeColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _strokeColor = { r : _r, g : _g, b : _b, a : _a};
		ctx.strokeStyle = sketcher_util_ColorUtil.getColourObj(_strokeColor,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		if(this.get_rotate() != null && this.get_move() == null) {
			ctx.save();
			ctx.translate(this.get_x(),this.get_y());
			ctx.rotate(sketcher_util_MathUtil.radians(this.get_rotate()));
			ctx.rect(-(this.get_width() / 2),-(this.get_height() / 2),this.get_width(),this.get_height());
			ctx.restore();
		}
		if(this.get_move() != null && this.get_rotate() == null) {
			ctx.save();
			ctx.translate(this.cx,this.cy);
			ctx.translate(this.get_move().x,this.get_move().y);
			ctx.rect(0,0,this.get_width(),this.get_height());
			ctx.restore();
		}
		if(this.get_rotate() == null && this.get_move() == null) {
			this.buildCanvasShape(ctx);
		}
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
	}
	,buildCanvasShape: function(ctx) {
		if(this.get_radius() == null) {
			ctx.rect(this.cx,this.cy,this.get_width(),this.get_height());
		} else {
			var radius_tl = this.get_radius();
			var radius_tr = this.get_radius();
			var radius_br = this.get_radius();
			var radius_bl = this.get_radius();
			ctx.moveTo(this.cx + radius_tl,this.cy);
			ctx.lineTo(this.cx + this.get_width() - radius_tr,this.cy);
			ctx.quadraticCurveTo(this.cx + this.get_width(),this.cy,this.cx + this.get_width(),this.cy + radius_tr);
			ctx.lineTo(this.cx + this.get_width(),this.cy + this.get_height() - radius_br);
			ctx.quadraticCurveTo(this.cx + this.get_width(),this.cy + this.get_height(),this.cx + this.get_width() - radius_br,this.cy + this.get_height());
			ctx.lineTo(this.cx + radius_bl,this.cy + this.get_height());
			ctx.quadraticCurveTo(this.cx,this.cy + this.get_height(),this.cx,this.cy + this.get_height() - radius_bl);
			ctx.lineTo(this.cx,this.cy + radius_tl);
			ctx.quadraticCurveTo(this.cx,this.cy,this.cx + radius_tl,this.cy);
			ctx.closePath();
		}
	}
	,gl: function(gl) {
		if(!sketcher_draw_Rectangle.ISWARN) {
			$global.console.warn("webgl is not implemented yet");
			sketcher_draw_Rectangle.ISWARN = true;
		}
		var c = "#ff3333";
		var value = c;
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var rgba_r = _r;
		var rgba_g = _g;
		var rgba_b = _b;
		var rgba_a = _a;
		gl.viewport(0,0,gl.drawingBufferWidth,gl.drawingBufferHeight);
		gl.clearColor(rgba_r / 255,rgba_g / 255,rgba_b / 255,rgba_a);
		gl.clear(16384);
	}
	,get_radius: function() {
		return this.radius;
	}
	,get_width: function() {
		return this.width;
	}
	,set_width: function(value) {
		return this.width = value;
	}
	,get_height: function() {
		return this.height;
	}
	,set_height: function(value) {
		return this.height = value;
	}
	,__class__: sketcher_draw_Rectangle
});
var sketcher_export_FileExport = function() { };
sketcher_export_FileExport.__name__ = "sketcher.export.FileExport";
sketcher_export_FileExport.svg2Canvas = function(svg,isJpg,filename,isTransparant) {
	if(isTransparant == null) {
		isTransparant = false;
	}
	if(isJpg == null) {
		isJpg = true;
	}
	var svgW = Std.parseInt(svg.getAttribute("width"));
	var svgH = Std.parseInt(svg.getAttribute("height"));
	var canvas = window.document.createElement("canvas");
	var ctx = canvas.getContext("2d",null);
	canvas.width = svgW;
	canvas.height = svgH;
	var image = new Image();
	image.onload = function() {
		if(isJpg) {
			ctx.fillStyle = "white";
			ctx.fillRect(0,0,canvas.width,canvas.height);
		}
		ctx.drawImage(image,0,0,svgW,svgH);
		sketcher_export_FileExport.downloadImageBg(ctx,isJpg,filename,isTransparant);
	};
	image.onerror = function(e) {
		$global.console.warn(e);
	};
	var tmp = window.btoa(svg.outerHTML);
	image.src = "data:image/svg+xml;base64," + tmp;
};
sketcher_export_FileExport.downloadTextFile = function(text,fileName) {
	if(fileName == null) {
		fileName = "CC-txt-" + new Date().getTime() + ".txt";
	}
	var el = window.document.createElement("a");
	el.href = "data:text/plain;charset=utf-8," + encodeURIComponent(text);
	el.download = fileName;
	el.style.display = "none";
	window.document.body.appendChild(el);
	el.click();
	window.document.body.removeChild(el);
};
sketcher_export_FileExport.convertStr2Href = function(str) {
	return "data:text/plain;charset=utf-8," + encodeURIComponent(str);
};
sketcher_export_FileExport.downloadImageBg = function(ctx,isJpg,fileName,isTransparant) {
	if(isTransparant == null) {
		isTransparant = false;
	}
	if(isJpg == null) {
		isJpg = false;
	}
	haxe_Log.trace(ctx,{ fileName : "sketcher/export/FileExport.hx", lineNumber : 166, className : "sketcher.export.FileExport", methodName : "downloadImageBg", customParams : [isJpg,fileName,isTransparant]});
	var canvas = ctx.canvas;
	var ext = isJpg ? "jpg" : "png";
	if(fileName == null) {
		var hash = $global.location.hash;
		hash = StringTools.replace(hash,"#","").toLowerCase();
		if(hash == "") {
			hash = "image";
		}
		fileName = "" + hash + "-" + new Date().getTime();
	}
	var _w = canvas.width;
	var _h = canvas.height;
	if(!isTransparant) {
		var currentCanvas = ctx.canvas;
		var newCanvas = currentCanvas.cloneNode(true);
		var n_ctx = newCanvas.getContext("2d",null);
		n_ctx.fillStyle = "#FFffff";
		n_ctx.fillRect(0,0,newCanvas.width,newCanvas.height);
		n_ctx.drawImage(canvas,0,0);
		ctx.drawImage(newCanvas,0,0);
	}
	var link = window.document.createElement("a");
	link.style.cssText = "display:none";
	link.download = fileName + ("." + ext);
	if(!HTMLCanvasElement.prototype.toBlob) {
		haxe_Log.trace("There is no blob",{ fileName : "sketcher/export/FileExport.hx", lineNumber : 235, className : "sketcher.export.FileExport", methodName : "downloadImageBg"});
		link.href = ctx.canvas.toDataURL(isJpg ? "image/jpeg" : "",1);
		link.click();
		link.remove();
	} else {
		haxe_Log.trace("Attack of the blob",{ fileName : "sketcher/export/FileExport.hx", lineNumber : 241, className : "sketcher.export.FileExport", methodName : "downloadImageBg"});
		ctx.canvas.toBlob(function(blob) {
			link.href = URL.createObjectURL(blob);
			link.click();
			link.remove();
		},isJpg ? "image/jpeg" : "",1);
	}
	window.document.body.appendChild(link);
};
var sketcher_export_TypeSupported = function() { };
sketcher_export_TypeSupported.__name__ = "sketcher.export.TypeSupported";
sketcher_export_TypeSupported.checkTypes = function() {
	if(window.MediaRecorder == undefined) {
		$global.console.error("MediaRecorder not supported, boo");
	} else {
		var contentTypes = ["video/ogg","audio/ogg;codecs=vorbis","video/mp4","audio/mp4","video/mp4;codecs=avc1","video/mp4;codecs=\"avc1.4d002a\"","audio/mpeg","video/x-matroska","video/x-matroska;codecs=avc1","video/quicktime","video/webm","video/webm;codecs=daala","video/webm;codecs=h264","audio/webm;codecs=opus","audio/webm;codecs=\"opus\"","video/webm;codecs=vp8","video/webm;codecs=\"vp8\"","video/webm;codecs=\"vp9\"","audio/webm;codecs=\"vorbis\"","video/webm;codecs=\"vp8,vorbis\"","video/webm;codecs=\"vp9,opus\"","video/invalid"];
		$global.console.groupCollapsed("Check if codecs work:");
		var _g = 0;
		var _g1 = contentTypes.length;
		while(_g < _g1) {
			var i = _g++;
			if(MediaRecorder.isTypeSupported(contentTypes[i])) {
				$global.console.log("%c Is " + contentTypes[i] + " supported? Maybe!","background: #444; color: #bada55; padding: 2px; border-radius:2px");
			} else {
				$global.console.log("Is " + contentTypes[i] + " supported? " + (MediaRecorder.isTypeSupported(contentTypes[i]) ? "Maybe!" : "Nope :("));
			}
		}
		$global.console.groupEnd();
	}
};
var sketcher_export_VideoExport = function() {
	sketcher_export_TypeSupported.checkTypes();
};
sketcher_export_VideoExport.__name__ = "sketcher.export.VideoExport";
sketcher_export_VideoExport.prototype = {
	setCanvas: function(canvas) {
		this.canvas = canvas;
	}
	,setup: function() {
		if(this.options == null) {
			this.options = { bitsPerSecond : 5500000};
		}
		this.setupCombineRecordings();
		if(this.audioEl != null) {
			this.setupAudioRecording();
		}
		this.setupCanvasRecording();
	}
	,start: function() {
		$global.console.info("start recording");
		this.startRecording();
	}
	,stop: function() {
		$global.console.info("stop recording");
		this.stopRecording();
	}
	,startRecording: function() {
		if(this.audioRecorder != null) {
			this.audioRecorder.start();
		}
		this.videoRecorder.start();
		this.combineRecorder.start();
	}
	,stopRecording: function() {
		if(this.audioRecorder != null) {
			this.audioRecorder.stop();
		}
		this.videoRecorder.stop();
		this.combineRecorder.stop();
	}
	,setupCanvasRecording: function() {
		var _gthis = this;
		var canvasStream = this.canvas.captureStream();
		var videoTrack = canvasStream.getTracks()[0];
		this.combinedStream.addTrack(videoTrack);
		this.videoRecorder = new MediaRecorder(canvasStream,this.options);
		this.videoRecorder.ondataavailable = function(e) {
			_gthis.onVideoRecordingReady(e);
		};
	}
	,setupAudioRecording: function() {
		var _gthis = this;
		$global.console.info("setupAudioRecording");
		var audioContext = new AudioContext();
		var source = audioContext.createMediaElementSource(this.audioEl);
		source.connect(audioContext.destination);
		var audioStream = audioContext.createMediaStreamDestination();
		var audioTrack = audioStream.stream.getTracks()[0];
		this.combinedStream.addTrack(audioTrack);
		source.connect(audioStream);
		this.audioRecorder = new MediaRecorder(audioStream.stream,this.options);
		this.audioRecorder.ondataavailable = function(e) {
			_gthis.onAudioRecordingReady(e);
		};
	}
	,setupCombineRecordings: function() {
		var _gthis = this;
		$global.console.info("setupCombineRecordings");
		this.combinedStream = new MediaStream();
		this.combineRecorder = new MediaRecorder(this.combinedStream,this.options);
		this.combineRecorder.ondataavailable = function(e) {
			_gthis.onCombineRecordingReady(e);
		};
	}
	,onAudioRecordingReady: function(e) {
		$global.console.info("Finished onAudioRecordingReady. Got blob:",e.data);
	}
	,onVideoRecordingReady: function(e) {
		$global.console.info("Finished onVideoRecordingReady. Got blob:",e.data);
	}
	,onCombineRecordingReady: function(e) {
		$global.console.info("Finished onCombineRecordingReady. Got blob:",e.data);
		var videoUrl = URL.createObjectURL(e.data);
		var blob = new Blob([e.data]);
		if(this.videoEl != null) {
			this.videoEl.src = videoUrl;
			this.videoEl.play();
		}
		var filename = "RecordedVideo_" + new Date().getTime();
		var btnStyle = "color:black; padding:10px; margin:10px; background-color:silver;display: inline-block;font-weight: 400;text-align: center;white-space: nowrap;vertical-align: middle;";
		var bash = "#!/bin/bash" + "\n\n" + "# `-an`: remove audio\n" + "# `-qscale 1`:  highest quality\n" + "#  -c:v libx264\n" + "\n\n" + "# [mck] for now just convert to mp4 seems the best solution" + "\n\n" + "say \"start convert webm to mp4\"" + "\n" + ("ffmpeg -i " + filename + ".webm\n") + ("ffmpeg -y -i " + filename + ".webm " + filename + ".mp4\n") + ("ffmpeg -y -r 30 -i " + filename + ".webm -c:v libx264 -strict -2 -pix_fmt yuv420p -shortest -filter:v \"setpts=0.5*PTS\" " + filename + "_30fps.mp4\n") + ("ffmpeg -y -r 60 -i " + filename + ".webm -c:v libx264 -strict -2 -pix_fmt yuv420p -shortest -filter:v \"setpts=0.5*PTS\" " + filename + "_60fps.mp4\n") + ("ffmpeg -y -r 30 -i " + filename + ".mp4 -c:v libx264 -strict -2 -pix_fmt yuv420p -shortest -filter:v \"setpts=0.5*PTS\" " + filename + "_30fps_inputmp4.mp4") + "\n" + "say \"end convert webm to mp4\"";
		if(this.downloadButtonEl != null) {
			this.downloadButtonEl.href = videoUrl;
			this.downloadButtonEl.download = "" + filename + ".webm";
			this.downloadButtonEl.classList.remove("disabled");
		} else {
			var d = window.document.createElement("a");
			d.setAttribute("style",btnStyle);
			d.innerText = "Download: " + filename + ".webm (" + blob.size + " bytes)";
			d.href = videoUrl;
			d.download = "" + filename + ".webm";
			d.classList.remove("disabled");
			window.document.body.appendChild(d);
		}
		if(this.bashButtonEl != null) {
			this.bashButtonEl.href = sketcher_export_FileExport.convertStr2Href(bash);
			this.bashButtonEl.download = "" + filename + ".sh";
			this.bashButtonEl.classList.remove("disabled");
		} else {
			var d = window.document.createElement("a");
			d.setAttribute("style",btnStyle);
			d.innerText = "Bash: " + filename + ".sh";
			d.href = sketcher_export_FileExport.convertStr2Href(bash);
			d.download = "" + filename + ".sh";
			d.classList.remove("disabled");
			window.document.body.appendChild(d);
		}
		$global.console.info("Successfully recorded " + blob.size + " bytes of " + blob.type + " media.");
	}
	,__class__: sketcher_export_VideoExport
};
var sketcher_util_ColorUtil = function() { };
sketcher_util_ColorUtil.__name__ = "sketcher.util.ColorUtil";
sketcher_util_ColorUtil.getColour = function(r,g,b,a) {
	var c;
	if(g == null) {
		c = sketcher_util_ColorUtil.rgb(r,r,r);
	} else if(b == null && a == null) {
		c = sketcher_util_ColorUtil.rgba(r,r,r,g);
	} else if(a == null) {
		c = sketcher_util_ColorUtil.rgb(r,g,b);
	} else {
		c = sketcher_util_ColorUtil.rgba(r,g,b,a);
	}
	return c;
};
sketcher_util_ColorUtil.getColourObj = function(rgb,a) {
	return sketcher_util_ColorUtil.getColour(rgb.r,rgb.g,rgb.b,a);
};
sketcher_util_ColorUtil.rgb = function(r,g,b) {
	if(g == null) {
		g = r;
	}
	if(b == null) {
		b = r;
	}
	return "rgb(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(g),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(b),0,255) + ")";
};
sketcher_util_ColorUtil.rgba = function(r,g,b,a) {
	if(g == null) {
		return "rgb(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ")";
	} else if(b == null) {
		return "rgba(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(g,0,1) + ")";
	} else if(a == null) {
		return "rgba(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(g),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(b),0,255) + ", 1)";
	} else {
		return "rgba(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(g),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(b),0,255) + ", " + sketcher_util_MathUtil.clamp(a,0,1) + ")";
	}
};
var sketcher_util_EmbedUtil = function() { };
sketcher_util_EmbedUtil.__name__ = "sketcher.util.EmbedUtil";
sketcher_util_EmbedUtil.script = function(id,src,callback,callbackArray) {
	if(window.document.getElementById(id) != null) {
		return;
	}
	var el = window.document.createElement("script");
	el.id = id;
	el.src = src;
	el.crossOrigin = "anonymous";
	el.onload = function() {
		if(callback != null) {
			if(callbackArray == null) {
				callback.apply(callback,[id]);
			} else {
				callback.apply(callback,callbackArray);
			}
		}
	};
	window.document.body.appendChild(el);
};
sketcher_util_EmbedUtil.datgui = function(callback,callbackArray) {
	sketcher_util_EmbedUtil.script("datgui","https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.7.6/dat.gui.min.js",callback,callbackArray);
	var style = window.document.createElement("style");
	style.innerHTML = ".dg .c input[type=\"text\"]{\n\t\t\tline-height : normal;\n\t\t}";
	window.document.head.appendChild(style);
};
var sketcher_util_MathUtil = function() { };
sketcher_util_MathUtil.__name__ = "sketcher.util.MathUtil";
sketcher_util_MathUtil.radians = function(deg) {
	return deg * Math.PI / 180;
};
sketcher_util_MathUtil.randomInteger = function(min,max) {
	if(max == null) {
		max = min;
		min = 0;
	}
	return Math.floor(Math.random() * (max + 1 - min)) + min;
};
sketcher_util_MathUtil.randomInt = function(min,max) {
	return sketcher_util_MathUtil.randomInteger(min,max);
};
sketcher_util_MathUtil.clamp = function(value,min,max) {
	return Math.min(Math.max(value,Math.min(min,max)),Math.max(min,max));
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = String;
String.__name__ = "String";
Array.__name__ = "Array";
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
js_Boot.__toStr = ({ }).toString;
App.NAME = "[cc-gamepad]";
CCGamepad.AXIS_RIGHT = "{x:1,y:0}";
CCGamepad.AXIS_LEFT = "{x:-1,y:0}";
CCGamepad.AXIS_DOWN = "{x:0,y:1}";
CCGamepad.AXIS_UP = "{x:0,y:-1}";
CCGamepad.AXIS_DOWN_RIGHT = "{x:1,y:1}";
CCGamepad.AXIS_DOWN_LEFT = "{x:-1,y:1}";
CCGamepad.AXIS_UP_RIGHT = "{x:1,y:-1}";
CCGamepad.AXIS_UP_LEFT = "{x:-1,y:-1}";
CCGamepad.AXIS_CENTER = "{x:0,y:0}";
CCGamepad.AXIS_RIGHT_DISC = "→";
CCGamepad.AXIS_LEFT_DISC = "←";
CCGamepad.AXIS_DOWN_DISC = "↓";
CCGamepad.AXIS_UP_DISC = "↑";
CCGamepad.AXIS_DOWN_RIGHT_DISC = "↘";
CCGamepad.AXIS_DOWN_LEFT_DISC = "↙";
CCGamepad.AXIS_UP_RIGHT_DISC = "↗";
CCGamepad.AXIS_UP_LEFT_DISC = "↖";
CCGamepad.AXIS_CENTER_DISC = "×";
CCGamepad.AXIS_MAP = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	_g.h[CCGamepad.AXIS_RIGHT] = CCGamepad.AXIS_RIGHT_DISC;
	_g.h[CCGamepad.AXIS_LEFT] = CCGamepad.AXIS_LEFT_DISC;
	_g.h[CCGamepad.AXIS_DOWN] = CCGamepad.AXIS_DOWN_DISC;
	_g.h[CCGamepad.AXIS_UP] = CCGamepad.AXIS_UP_DISC;
	_g.h[CCGamepad.AXIS_DOWN_RIGHT] = CCGamepad.AXIS_DOWN_RIGHT_DISC;
	_g.h[CCGamepad.AXIS_DOWN_LEFT] = CCGamepad.AXIS_DOWN_LEFT_DISC;
	_g.h[CCGamepad.AXIS_UP_RIGHT] = CCGamepad.AXIS_UP_RIGHT_DISC;
	_g.h[CCGamepad.AXIS_UP_LEFT] = CCGamepad.AXIS_UP_LEFT_DISC;
	_g.h[CCGamepad.AXIS_CENTER] = CCGamepad.AXIS_CENTER_DISC;
	$r = _g;
	return $r;
}(this));
CCGamepad.BUTTON_X = 0;
CCGamepad.BUTTON_A = 1;
CCGamepad.BUTTON_B = 2;
CCGamepad.BUTTON_Y = 3;
CCGamepad.BUTTON_LEFT_BOTTOM = 4;
CCGamepad.BUTTON_RIGHT_BOTTOM = 5;
CCGamepad.BUTTON_SELECT = 8;
CCGamepad.BUTTON_START = 9;
CCGamepad.BUTTON_X_DISC = "X";
CCGamepad.BUTTON_A_DISC = "A";
CCGamepad.BUTTON_B_DISC = "B";
CCGamepad.BUTTON_Y_DISC = "Y";
CCGamepad.BUTTON_LEFT_BOTTOM_DISC = "Left Bottom";
CCGamepad.BUTTON_RIGHT_BOTTOM_DISC = "Right Bottom";
CCGamepad.BUTTON_SELECT_DISC = "Select";
CCGamepad.BUTTON_START_DISC = "Start";
CCGamepad.BUTTON_MAP = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	_g.h[CCGamepad.BUTTON_X] = CCGamepad.BUTTON_X_DISC;
	_g.h[CCGamepad.BUTTON_A] = CCGamepad.BUTTON_A_DISC;
	_g.h[CCGamepad.BUTTON_B] = CCGamepad.BUTTON_B_DISC;
	_g.h[CCGamepad.BUTTON_Y] = CCGamepad.BUTTON_Y_DISC;
	_g.h[CCGamepad.BUTTON_LEFT_BOTTOM] = CCGamepad.BUTTON_LEFT_BOTTOM_DISC;
	_g.h[CCGamepad.BUTTON_RIGHT_BOTTOM] = CCGamepad.BUTTON_RIGHT_BOTTOM_DISC;
	_g.h[CCGamepad.BUTTON_SELECT] = CCGamepad.BUTTON_SELECT_DISC;
	_g.h[CCGamepad.BUTTON_START] = CCGamepad.BUTTON_START_DISC;
	$r = _g;
	return $r;
}(this));
SNES.BUTTON_X = 0;
SNES.BUTTON_A = 1;
SNES.BUTTON_B = 2;
SNES.BUTTON_Y = 3;
SNES.BUTTON_LEFT_BOTTOM = 4;
SNES.BUTTON_RIGHT_BOTTOM = 5;
SNES.BUTTON_SELECT = 8;
SNES.BUTTON_START = 9;
Globals.MOUSE_UP = "mouseup";
Globals.KEY_DOWN = "keydown";
Globals.KEY_UP = "keyup";
Globals.RESIZE = "resize";
Globals.isMouseDown = false;
Globals.isFullscreen = false;
Xml.Element = 0;
Xml.Document = 6;
interactive_App.NAME = "[cc-interactive]";
sketcher_draw_Base.COUNT = 0;
sketcher_util_ColorUtil.niceColor100SortedString = [["#E0E4CC","#A7DBD8","#69D2E7","#F38630","#FA6900"],["#F9CDAD","#C8C8A9","#FC9D9A","#83AF9B","#FE4365"],["#ECD078","#D95B43","#53777A","#C02942","#542437"],["#C7F464","#4ECDC4","#FF6B6B","#C44D58","#556270"],["#ECE5CE","#F1D4AF","#C5E0DC","#E08E79","#774F38"],["#E8DDCB","#CDB380","#036564","#033649","#031634"],["#F8CA00","#E97F02","#8A9B0F","#BD1550","#490A3D"],["#E5FCC2","#9DE0AD","#45ADA8","#547980","#594F4F"],["#EDC951","#EB6841","#00A0B0","#CC333F","#6A4A3C"],["#F4EAD5","#C6E5D9","#C6A49A","#D68189","#E94E77"],["#DAD8A7","#FF9E9D","#7FC7AF","#3FB8AF","#FF3D7F"],["#D5DED9","#D9CEB2","#99B2B7","#948C75","#7A6A53"],["#FFFFFF","#F2E9E1","#CBE86B","#CBE86B","#1C140D"],["#EFFFCD","#DCE9BE","#555152","#99173C","#2E2633"],["#00DFFC","#00B4CC","#008C9E","#005F6B","#343838"],["#F7E4BE","#F0B49E","#B38184","#73626E","#413E4A"],["#E1F5C4","#EDE574","#F9D423","#FC913A","#FF4E50"],["#FECEA8","#99B898","#FF847C","#E84A5F","#2A363B"],["#F6F7BD","#E6AC27","#80BCA3","#BF4D28","#655643"],["#F9F2E7","#AEE239","#40C0CB","#8FBE00","#00A8C6"],["#E8CAA4","#64908A","#CC2A41","#424254","#351330"],["#F1EFA5","#D3CE3D","#60B99A","#F77825","#554236"],["#E9E9E9","#BCBCBC","#FF9900","#3299BB","#424242"],["#EBE3AA","#CAD7B2","#A8CABA","#838689","#5D4157"],["#F2C45A","#BFB35A","#88A65E","#5E8C6A","#8C2318"],["#FAD089","#FF9C5B","#F5634A","#3B8183","#ED303C"],["#F4FAD2","#F0F2EB","#E1EDB9","#D4EE5E","#FF4242"],["#FFFFFF","#D1E751","#4DBCE9","#26ADE4","#000000"],["#F8B195","#F67280","#C06C84","#6C5B7B","#355C7D"],["#EAFDE6","#BEF202","#88C425","#519548","#1B676B"],["#BCBDAC","#CFBE27","#F27435","#F02475","#3B2D38"],["#FCEBB6","#F0A830","#78C0A8","#F07818","#5E412F"],["#E2F7CE","#E8BF56","#E4844A","#91204D","#452632"],["#EEE6AB","#C5BC8E","#696758","#45484B","#36393B"],["#F0D8A8","#F2D694","#86B8B1","#FA2A00","#3D1C00"],["#FFF7BD","#F2F26F","#95CFB7","#FF823A","#F04155"],["#A0C55F","#7AB317","#0D6759","#0B2E59","#2A044A"],["#EEDD99","#EEC290","#CCC68D","#EEAA88","#BBBB88"],["#B9D7D9","#668284","#7B3B3B","#493736","#2A2829"],["#ECF081","#FFBE40","#B3CC57","#EF746F","#AB3E5B"],["#EDB92E","#A3A948","#F85931","#009989","#CE1836"],["#CCBF82","#B8AF03","#67917A","#E33258","#170409"],["#E8D5B9","#E8D5B7","#F5B349","#FC3A51","#0E2430"],["#EBEFC9","#EEE0B7","#E8CAAF","#C4CBB7","#AAB3AB"],["#F07241","#C04848","#601848","#480048","#300030"],["#F4EBC3","#F0E2A4","#C5CEAE","#BCA297","#AB526B"],["#F0F0D8","#C0D860","#789048","#607848","#604848"],["#DCEDC2","#FFD3B5","#A8E6CE","#FFAAA6","#FF8C94"],["#FFFEDF","#DFBA69","#3E4147","#5A2E2E","#2A2C31"],["#FEDCBA","#ECDBBC","#DADABD","#C8D9BF","#B6D8C0"],["#FCF7C5","#0ABFBC","#FC354C","#13747D","#29221F"],["#FFEAAD","#B3E099","#D14334","#028F76","#1C2130"],["#EDEBE6","#D6E1C7","#94C7B6","#D3643B","#403B33"],["#F8FCC1","#C8CF02","#E6781E","#1693A7","#CC0C39"],["#DAD6CA","#1BB0CE","#4F8699","#6A5E72","#563444"],["#E5DDCB","#A7C5BD","#EB7B59","#CF4647","#524656"],["#FDF1CC","#C6D6B8","#FCD036","#E3AD40","#987F69"],["#E5F04C","#C0D23E","#E15E32","#A82743","#5C323E"],["#EBEBBC","#BCE3C5","#82B3AE","#F21D41","#230F2B"],["#B9D3B0","#F6AA93","#F88F79","#81BDA4","#B28774"],["#E6F9BC","#BCDEA5","#83988E","#574951","#3A111C"],["#FCF7D3","#DEE8BE","#B7D1A3","#CD8C52","#5E3929"],["#F03C02","#C21A01","#A30006","#6B0103","#1C0113"],["#FFEAF2","#FCD9E5","#FBC5D8","#F1396D","#382F32"],["#E3DFBA","#C8D6BF","#93CCC6","#6CBDB5","#1A1F1E"],["#CCCCCC","#B11623","#9F111B","#292C37","#000000"],["#FBEEC2","#ACCEC0","#C1B398","#61A6AB","#605951"],["#FFE9AF","#F9D6AC","#FEA6A2","#8DCCAD","#988864"],["#F6F6F6","#E8E8E8","#B90504","#333333","#990100"],["#E9F2F9","#9CC4E4","#F26C4F","#3A89C9","#1B325F"],["#DCD1B4","#FAB87F","#F87E7B","#5E9FA3","#B05574"],["#F5F4D7","#E0DFB1","#A5A36C","#535233","#951F2B"],["#C8FF00","#FA023C","#413D3D","#4B000F","#040004"],["#EFF3CD","#B2D5BA","#61ADA0","#248F8D","#605063"],["#DFECE6","#92C7A3","#3CA2A2","#215A6D","#2D2D29"],["#CFFFDD","#B4DEC1","#A85163","#FF1F4C","#5C5863"],["#CCFC8E","#8EBE94","#DC5B3E","#827085","#4E395D"],["#FFFEC7","#9DC9AC","#FF9D2E","#919167","#F56218"],["#FEE5AD","#FACA66","#A1DBB2","#F7A541","#F45D4C"],["#FFFEE4","#FFEFD3","#D0ECEA","#9FD6D2","#8B7A5E"],["#A8A7A7","#CC527A","#E8175D","#474747","#363636"],["#FFEDBF","#F8E4C1","#F7803C","#F54828","#2E0D23"],["#F8EDD1","#C5CFC6","#D88A8A","#9D9D93","#474843"],["#F1EDD0","#CDE9CA","#A0CAB5","#F38A8A","#55443D"],["#94BA65","#2790B0","#4E4D4A","#2B4E72","#353432"],["#FEFEEB","#F8F4E4","#A5B3AA","#0CA5B0","#4E3F30"],["#F6D86B","#FB6B41","#339194","#F10C49","#A70267"],["#CCAC95","#9A947C","#9D7E79","#748B83","#5B756C"],["#EDF6EE","#D1C089","#B3204D","#412E28","#151101"],["#ECBE13","#93A42A","#2FB8AC","#309292","#046D8B"],["#F5E0D3","#FFD0B3","#FFB88C","#DE6262","#4D3B3B"],["#FFFBB7","#A6F6AF","#66B6AB","#5B7C8D","#4F2958"],["#FABE28","#FF8A00","#88C100","#00C176","#FF003C"],["#FCFEF5","#FAFBE3","#E9FFE1","#D6E6C3","#CDCFB7"],["#DDD9AB","#BFD8AD","#9CDDC8","#F7AF63","#633D2E"],["#0B8185","#1F5F61","#36544F","#403831","#30261C"],["#F9BF76","#8EB2C5","#E5625C","#D1313D","#615375"],["#EEE9E5","#FFE181","#FAD3B2","#FFBA7F","#FF9C97"],["#AAFF00","#FFAA00","#00AAFF","#FF00AA","#AA00FF"],["#D1AA34","#A7A844","#A46583","#C2412D","#5A1E4A"],["#F8F3BF","#DCE4F7","#BFCFF7","#75616B","#D34017"]];
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=cc-interactive.js.map